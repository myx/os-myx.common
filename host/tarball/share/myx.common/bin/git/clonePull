#!/bin/sh

##### !!! This script is universal for FreeBSD, Darwin, Ubuntu. !!! #####

GitClonePull(){
	set -e

	local tgtPath="$1"
	[ -z "$tgtPath" ] && echo "ERROR: GitClonePull: tgtPath is required!" >&2 && return 1

	local repoUrl="$2"
	[ -z "$repoUrl" ] && echo "ERROR: GitClonePull: repoUrl is required!" >&2 && return 1

	local specificBranch="$3"
	
	local currentPath="`pwd`"
	
	if [ -d "$tgtPath" ] && [ -d "$tgtPath/.git" ] ; then
		cd "$tgtPath"
		git rev-parse --abbrev-ref HEAD > /dev/null \
			&& [ "`git rev-parse --abbrev-ref HEAD`" != "${specificBranch:-master}" ] \
			&& cd "$tgtPath/.." \
			&& rm -rf "$tgtPath" \
		|| true
		cd "$currentPath"
	fi
	if [ ! -d "$tgtPath" ] || [ ! -d "$tgtPath/.git" ] ; then
	    echo "GitClonePull: $tgtPath: creating..." >&2
	    mkdir -p "$tgtPath"
		if ! git clone "$repoUrl" "$tgtPath" ; then
		    rm -rf "$tgtPath"
		    return 1
		fi
		cd "$currentPath"
	fi
	if [ -d "$tgtPath" ] ; then
	    cd "$tgtPath"
	    echo "GitClonePull: $tgtPath: updating..." >&2
	    git remote set-url origin "$repoUrl"
	    if [ -n $specificBranch ] ; then
	    	git checkout $specificBranch
	    fi
	    git pull
	    echo "GitClonePull: $tgtPath: finished." >&2
		cd "$currentPath"
	    echo "GitClonePull: $tgtPath: finished." >&2
	fi
}

case "$0" in
	*/myx.common/bin/git/clonePull) 
		if [ -z "$1" ] ; then
			echo "Syntax: myx.common git/clonePull [--no-write] dst_path repo_url [branch]" >&2
			echo "    If 'branch' argument is not set, 'master' will be used." >&2
			echo "    Should be equivalent to: 'myx.common git/cloneSync --no-push'." >&2
			exit 1
		fi
		set -e
		GitClonePull "$@"
	;;
esac
